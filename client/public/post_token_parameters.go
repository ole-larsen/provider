// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPostTokenParams creates a new PostTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostTokenParams() *PostTokenParams {
	return &PostTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostTokenParamsWithTimeout creates a new PostTokenParams object
// with the ability to set a timeout on a request.
func NewPostTokenParamsWithTimeout(timeout time.Duration) *PostTokenParams {
	return &PostTokenParams{
		timeout: timeout,
	}
}

// NewPostTokenParamsWithContext creates a new PostTokenParams object
// with the ability to set a context for a request.
func NewPostTokenParamsWithContext(ctx context.Context) *PostTokenParams {
	return &PostTokenParams{
		Context: ctx,
	}
}

// NewPostTokenParamsWithHTTPClient creates a new PostTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostTokenParamsWithHTTPClient(client *http.Client) *PostTokenParams {
	return &PostTokenParams{
		HTTPClient: client,
	}
}

/*
PostTokenParams contains all the parameters to send to the API endpoint

	for the post token operation.

	Typically these are written to a http.Request.
*/
type PostTokenParams struct {

	/* ClientID.

	   client id
	*/
	ClientID string

	/* ClientSecret.

	   client secret
	*/
	ClientSecret string

	/* Domain.

	   get domain for credentials
	*/
	Domain *string

	/* GrantType.

	   grant type credentials
	*/
	GrantType *string

	/* Scope.

	   get credentials
	*/
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTokenParams) WithDefaults() *PostTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post token params
func (o *PostTokenParams) WithTimeout(timeout time.Duration) *PostTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post token params
func (o *PostTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post token params
func (o *PostTokenParams) WithContext(ctx context.Context) *PostTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post token params
func (o *PostTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post token params
func (o *PostTokenParams) WithHTTPClient(client *http.Client) *PostTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post token params
func (o *PostTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the post token params
func (o *PostTokenParams) WithClientID(clientID string) *PostTokenParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the post token params
func (o *PostTokenParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithClientSecret adds the clientSecret to the post token params
func (o *PostTokenParams) WithClientSecret(clientSecret string) *PostTokenParams {
	o.SetClientSecret(clientSecret)
	return o
}

// SetClientSecret adds the clientSecret to the post token params
func (o *PostTokenParams) SetClientSecret(clientSecret string) {
	o.ClientSecret = clientSecret
}

// WithDomain adds the domain to the post token params
func (o *PostTokenParams) WithDomain(domain *string) *PostTokenParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the post token params
func (o *PostTokenParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithGrantType adds the grantType to the post token params
func (o *PostTokenParams) WithGrantType(grantType *string) *PostTokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the post token params
func (o *PostTokenParams) SetGrantType(grantType *string) {
	o.GrantType = grantType
}

// WithScope adds the scope to the post token params
func (o *PostTokenParams) WithScope(scope *string) *PostTokenParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the post token params
func (o *PostTokenParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *PostTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	// form param client_secret
	frClientSecret := o.ClientSecret
	fClientSecret := frClientSecret
	if fClientSecret != "" {
		if err := r.SetFormParam("client_secret", fClientSecret); err != nil {
			return err
		}
	}

	if o.Domain != nil {

		// form param domain
		var frDomain string
		if o.Domain != nil {
			frDomain = *o.Domain
		}
		fDomain := frDomain
		if fDomain != "" {
			if err := r.SetFormParam("domain", fDomain); err != nil {
				return err
			}
		}
	}

	if o.GrantType != nil {

		// form param grant_type
		var frGrantType string
		if o.GrantType != nil {
			frGrantType = *o.GrantType
		}
		fGrantType := frGrantType
		if fGrantType != "" {
			if err := r.SetFormParam("grant_type", fGrantType); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
