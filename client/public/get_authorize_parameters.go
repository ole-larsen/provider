// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAuthorizeParams creates a new GetAuthorizeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuthorizeParams() *GetAuthorizeParams {
	return &GetAuthorizeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuthorizeParamsWithTimeout creates a new GetAuthorizeParams object
// with the ability to set a timeout on a request.
func NewGetAuthorizeParamsWithTimeout(timeout time.Duration) *GetAuthorizeParams {
	return &GetAuthorizeParams{
		timeout: timeout,
	}
}

// NewGetAuthorizeParamsWithContext creates a new GetAuthorizeParams object
// with the ability to set a context for a request.
func NewGetAuthorizeParamsWithContext(ctx context.Context) *GetAuthorizeParams {
	return &GetAuthorizeParams{
		Context: ctx,
	}
}

// NewGetAuthorizeParamsWithHTTPClient creates a new GetAuthorizeParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuthorizeParamsWithHTTPClient(client *http.Client) *GetAuthorizeParams {
	return &GetAuthorizeParams{
		HTTPClient: client,
	}
}

/*
GetAuthorizeParams contains all the parameters to send to the API endpoint

	for the get authorize operation.

	Typically these are written to a http.Request.
*/
type GetAuthorizeParams struct {

	/* AccessType.

	   access type
	*/
	AccessType *string

	/* ClientID.

	   client id
	*/
	ClientID string

	/* CodeChallenge.

	   code challenge
	*/
	CodeChallenge *string

	/* CodeChallengeMethod.

	   code challenge method
	*/
	CodeChallengeMethod *string

	/* RedirectURI.

	   redirect uri
	*/
	RedirectURI string

	/* ResponseType.

	   response type
	*/
	ResponseType string

	/* Scope.

	   scope
	*/
	Scope string

	/* State.

	   state
	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get authorize params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuthorizeParams) WithDefaults() *GetAuthorizeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get authorize params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuthorizeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get authorize params
func (o *GetAuthorizeParams) WithTimeout(timeout time.Duration) *GetAuthorizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get authorize params
func (o *GetAuthorizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get authorize params
func (o *GetAuthorizeParams) WithContext(ctx context.Context) *GetAuthorizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get authorize params
func (o *GetAuthorizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get authorize params
func (o *GetAuthorizeParams) WithHTTPClient(client *http.Client) *GetAuthorizeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get authorize params
func (o *GetAuthorizeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessType adds the accessType to the get authorize params
func (o *GetAuthorizeParams) WithAccessType(accessType *string) *GetAuthorizeParams {
	o.SetAccessType(accessType)
	return o
}

// SetAccessType adds the accessType to the get authorize params
func (o *GetAuthorizeParams) SetAccessType(accessType *string) {
	o.AccessType = accessType
}

// WithClientID adds the clientID to the get authorize params
func (o *GetAuthorizeParams) WithClientID(clientID string) *GetAuthorizeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get authorize params
func (o *GetAuthorizeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithCodeChallenge adds the codeChallenge to the get authorize params
func (o *GetAuthorizeParams) WithCodeChallenge(codeChallenge *string) *GetAuthorizeParams {
	o.SetCodeChallenge(codeChallenge)
	return o
}

// SetCodeChallenge adds the codeChallenge to the get authorize params
func (o *GetAuthorizeParams) SetCodeChallenge(codeChallenge *string) {
	o.CodeChallenge = codeChallenge
}

// WithCodeChallengeMethod adds the codeChallengeMethod to the get authorize params
func (o *GetAuthorizeParams) WithCodeChallengeMethod(codeChallengeMethod *string) *GetAuthorizeParams {
	o.SetCodeChallengeMethod(codeChallengeMethod)
	return o
}

// SetCodeChallengeMethod adds the codeChallengeMethod to the get authorize params
func (o *GetAuthorizeParams) SetCodeChallengeMethod(codeChallengeMethod *string) {
	o.CodeChallengeMethod = codeChallengeMethod
}

// WithRedirectURI adds the redirectURI to the get authorize params
func (o *GetAuthorizeParams) WithRedirectURI(redirectURI string) *GetAuthorizeParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the get authorize params
func (o *GetAuthorizeParams) SetRedirectURI(redirectURI string) {
	o.RedirectURI = redirectURI
}

// WithResponseType adds the responseType to the get authorize params
func (o *GetAuthorizeParams) WithResponseType(responseType string) *GetAuthorizeParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the get authorize params
func (o *GetAuthorizeParams) SetResponseType(responseType string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the get authorize params
func (o *GetAuthorizeParams) WithScope(scope string) *GetAuthorizeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get authorize params
func (o *GetAuthorizeParams) SetScope(scope string) {
	o.Scope = scope
}

// WithState adds the state to the get authorize params
func (o *GetAuthorizeParams) WithState(state *string) *GetAuthorizeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get authorize params
func (o *GetAuthorizeParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessType != nil {

		// query param access_type
		var qrAccessType string

		if o.AccessType != nil {
			qrAccessType = *o.AccessType
		}
		qAccessType := qrAccessType
		if qAccessType != "" {

			if err := r.SetQueryParam("access_type", qAccessType); err != nil {
				return err
			}
		}
	}

	// query param client_id
	qrClientID := o.ClientID
	qClientID := qrClientID
	if qClientID != "" {

		if err := r.SetQueryParam("client_id", qClientID); err != nil {
			return err
		}
	}

	if o.CodeChallenge != nil {

		// query param code_challenge
		var qrCodeChallenge string

		if o.CodeChallenge != nil {
			qrCodeChallenge = *o.CodeChallenge
		}
		qCodeChallenge := qrCodeChallenge
		if qCodeChallenge != "" {

			if err := r.SetQueryParam("code_challenge", qCodeChallenge); err != nil {
				return err
			}
		}
	}

	if o.CodeChallengeMethod != nil {

		// query param code_challenge_method
		var qrCodeChallengeMethod string

		if o.CodeChallengeMethod != nil {
			qrCodeChallengeMethod = *o.CodeChallengeMethod
		}
		qCodeChallengeMethod := qrCodeChallengeMethod
		if qCodeChallengeMethod != "" {

			if err := r.SetQueryParam("code_challenge_method", qCodeChallengeMethod); err != nil {
				return err
			}
		}
	}

	// query param redirect_uri
	qrRedirectURI := o.RedirectURI
	qRedirectURI := qrRedirectURI
	if qRedirectURI != "" {

		if err := r.SetQueryParam("redirect_uri", qRedirectURI); err != nil {
			return err
		}
	}

	// query param response_type
	qrResponseType := o.ResponseType
	qResponseType := qrResponseType
	if qResponseType != "" {

		if err := r.SetQueryParam("response_type", qResponseType); err != nil {
			return err
		}
	}

	// query param scope
	qrScope := o.Scope
	qScope := qrScope
	if qScope != "" {

		if err := r.SetQueryParam("scope", qScope); err != nil {
			return err
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
