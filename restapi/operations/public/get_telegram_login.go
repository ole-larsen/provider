// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTelegramLoginHandlerFunc turns a function with the right signature into a get telegram login handler
type GetTelegramLoginHandlerFunc func(GetTelegramLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTelegramLoginHandlerFunc) Handle(params GetTelegramLoginParams) middleware.Responder {
	return fn(params)
}

// GetTelegramLoginHandler interface for that can handle valid get telegram login params
type GetTelegramLoginHandler interface {
	Handle(GetTelegramLoginParams) middleware.Responder
}

// NewGetTelegramLogin creates a new http.Handler for the get telegram login operation
func NewGetTelegramLogin(ctx *middleware.Context, handler GetTelegramLoginHandler) *GetTelegramLogin {
	return &GetTelegramLogin{Context: ctx, Handler: handler}
}

/*
	GetTelegramLogin swagger:route GET /telegram/login public getTelegramLogin

This API endpoint always responds ok
*/
type GetTelegramLogin struct {
	Context *middleware.Context
	Handler GetTelegramLoginHandler
}

func (o *GetTelegramLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTelegramLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
