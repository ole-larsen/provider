// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetVkCallbackHandlerFunc turns a function with the right signature into a get vk callback handler
type GetVkCallbackHandlerFunc func(GetVkCallbackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVkCallbackHandlerFunc) Handle(params GetVkCallbackParams) middleware.Responder {
	return fn(params)
}

// GetVkCallbackHandler interface for that can handle valid get vk callback params
type GetVkCallbackHandler interface {
	Handle(GetVkCallbackParams) middleware.Responder
}

// NewGetVkCallback creates a new http.Handler for the get vk callback operation
func NewGetVkCallback(ctx *middleware.Context, handler GetVkCallbackHandler) *GetVkCallback {
	return &GetVkCallback{Context: ctx, Handler: handler}
}

/*
	GetVkCallback swagger:route GET /vk/callback public getVkCallback

This API endpoint always responds ok
*/
type GetVkCallback struct {
	Context *middleware.Context
	Handler GetVkCallbackHandler
}

func (o *GetVkCallback) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetVkCallbackParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
